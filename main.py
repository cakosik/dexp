import logging
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import mysql.connector
import re
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8060714191:AAHFe30t5RTBcqeBoAo4OqtZOFZOQevyNa8"
ADMIN_IDS = [8183369219 , 8181544644]  # ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
MAIN_ADMIN_ID = 6194786755  # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
app = FastAPI()

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ===
def connect_db():
    return mysql.connector.connect(
        host="185.43.5.0",
        user="ches",
        password="nT4gY0hJ4s",
        database="ches"
    )

# === FSM ===
class NotificationState(StatesGroup):
    title = State()
    link = State()

class PromoState(StatesGroup):
    name = State()
    skidka = State()
    uses = State()

# === –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

last_seen_buy_id = 0  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫

# === START ===
@dp.message(Command("start"))
async def start_cmd(message: Message):
    caption = f"üëã –ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dex Admin Bot Panel.\n/help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."

    try:
        img_path = os.path.join(os.path.dirname(__file__), "bots.jpg")
        photo = FSInputFile(img_path)
        await message.answer_photo(photo, caption=caption, parse_mode=None)
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ /start]: {e}")

# === PING ===
@dp.message(Command("ping"))
async def ping_cmd(message: Message):
    start = datetime.now()
    msg = await message.reply("üèì –ü–∏–Ω–≥...")
    end = datetime.now()
    ping_ms = (end - start).microseconds // 1000
    if message.from_user.id == MAIN_ADMIN_ID:
        await msg.edit_text(f"üèì –ü–∏–Ω–≥: <b>{ping_ms} ms</b>")
    else:
        await msg.edit_text("üü¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# === INFO ===
@dp.message(lambda msg: msg.text.lower().startswith("/info") or msg.text.lower().startswith("–∏–Ω—Ñ–æ"))
async def info_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /info 123")

    user_id = int(args[1])
    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE ID = %s", (user_id,))
    user = cursor.fetchone()
    db.close()

    if not user:
        return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    text = (
        f"üë§ <b>ID:</b> {user['ID']}\n"
        f"üë• <b>–ò–º—è:</b> {user['FirstName']} {user['LastName']}\n"
        f"üìß <b>Email:</b> {user['Email']}\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['Balance']}\n"
        f"üîê <b>–ü–∞—Ä–æ–ª—å:</b> {user['Password']}\n"
        f"üõ°Ô∏è <b>–ê–¥–º–∏–Ω:</b> {user['Admin']}\n"
        f"üì± <b>Agent:</b> {user['Agent']}\n"
        f"üé® <b>Theme:</b> {user['Theme']}\n"
        f"üìÇ <b>Avatar:</b> {user['Avatar']}\n"
        f"üìå <b>user_status:</b> {user['user_status']}\n"
    )
    await message.reply(text)

# === GIVE ===
@dp.message(lambda msg: msg.text.lower().startswith("/give") or msg.text.lower().startswith("–≤—ã–¥–∞—Ç—å"))
async def give_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /give id —Å—É–º–º–∞")

    user_id = int(args[1])
    amount = int(args[2])

    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE ID = %s", (user_id,))
    user = cursor.fetchone()

    if not user:
        db.close()
        return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    old_balance = user['Balance']
    new_balance = old_balance + amount

    cursor.execute("UPDATE users SET Balance = %s WHERE ID = %s", (new_balance, user_id))
    db.commit()
    db.close()

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID <b>{user_id}</b> –≤—ã–¥–∞–Ω–æ <b>{amount}</b> –º–æ–Ω–µ—Ç.\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b>")

    if user.get("TelegramID"):
        try:
            await bot.send_message(user["TelegramID"], f"üí∏ –í–∞—à —Å—á—ë—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –º–æ–Ω–µ—Ç –∞–¥–º–∏–Ω–æ–º @{message.from_user.username}!")
        except:
            pass

    try:
        await bot.send_message(MAIN_ADMIN_ID,
            f"üßæ <b>–ê–¥–º–∏–Ω @{message.from_user.username or '–ë–µ–∑ username'} (ID: {message.from_user.id})</b>\n"
            f"üí∞ –ü–æ–ø–æ–ª–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:\n"
            f"üë§ {user['FirstName']} {user['LastName']}\n"
            f"üìß Email: {user['Email']}\n"
            f"üÜî ID: {user['ID']}\n"
            f"üí≥ –°—É–º–º–∞: {amount} –º–æ–Ω–µ—Ç")
    except:
        pass

# === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
@dp.message(lambda msg: msg.text.lower().startswith("/notifications") or msg.text.lower().startswith("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"))
async def get_notifications(message: Message):
    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM notifications ORDER BY Date DESC LIMIT 5")
    notes = cursor.fetchall()
    db.close()

    if not notes:
        return await message.reply("üîï –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

    text = "üì¢ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n\n"
    for n in notes:
        link = f"\nüîó <a href=\"{n['Link']}\">–°—Å—ã–ª–∫–∞</a>" if n['Link'] else ""
        text += f"üìÖ {n['Date'].strftime('%Y-%m-%d %H:%M:%S')}\n<b>{n['Title']}</b>{link}\n\n"

    await message.reply(text)

# FSM: —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message(lambda msg: msg.text.lower().startswith("—Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"))
async def start_notification(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    await state.set_state(NotificationState.title)

@dp.message(NotificationState.title)
async def notif_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    await state.set_state(NotificationState.link)

@dp.message(NotificationState.link)
async def notif_link(message: Message, state: FSMContext):
    data = await state.get_data()
    title = data['title']
    link = message.text if message.text.lower() != "–Ω–µ—Ç" else None

    db = connect_db()
    cursor = db.cursor()
    cursor.execute("INSERT INTO notifications (Date, Title, Link) VALUES (NOW(), %s, %s)", (title, link))
    db.commit()
    db.close()

    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.clear()


# === TAKE ===
@dp.message(lambda msg: msg.text.lower().startswith("/take") or msg.text.lower().startswith("–∑–∞–±—Ä–∞—Ç—å"))
async def take_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /take id —Å—É–º–º–∞")

    user_id = int(args[1])
    amount = int(args[2])

    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE ID = %s", (user_id,))
    user = cursor.fetchone()
    if not user:
        db.close()
        return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    old_balance = user['Balance']
    new_balance = max(0, old_balance - amount)

    cursor.execute("UPDATE users SET Balance = %s WHERE ID = %s", (new_balance, user_id))
    db.commit()
    db.close()

    await message.reply(f"üí∏ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID <b>{user_id}</b> –∏–∑—ä—è—Ç–æ <b>{amount}</b> –º–æ–Ω–µ—Ç.\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance}</b>")

# === SETBALANCE ===
@dp.message(lambda msg: msg.text.lower().startswith("/setbalance") or msg.text.lower().startswith("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
async def set_balance_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /setbalance id —Å—É–º–º–∞")

    user_id = int(args[1])
    new_balance = int(args[2])

    db = connect_db()
    cursor = db.cursor()
    cursor.execute("UPDATE users SET Balance = %s WHERE ID = %s", (new_balance, user_id))
    db.commit()
    db.close()

    await message.reply(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID <b>{user_id}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ <b>{new_balance}</b> –º–æ–Ω–µ—Ç.")

# === SETADMIN ===
@dp.message(lambda msg: msg.text.lower().startswith("/setadmin") or msg.text.lower().startswith("–≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞"))
async def set_admin_cmd(message: Message):
    if message.from_user.id != MAIN_ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /setadmin id")
    
    user_id = int(args[1])
    db = connect_db()
    cursor = db.cursor()
    cursor.execute("UPDATE users SET Admin = 1 WHERE ID = %s", (user_id,))
    db.commit()
    db.close()
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID <b>{user_id}</b> –≤—ã–¥–∞–Ω—ã –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞.")

# === REMOVEADMIN ===
@dp.message(lambda msg: msg.text.lower().startswith("/removeadmin") or msg.text.lower().startswith("—Å–Ω—è—Ç—å –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞"))
async def remove_admin_cmd(message: Message):
    if message.from_user.id != MAIN_ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /removeadmin id")
    
    user_id = int(args[1])
    db = connect_db()
    cursor = db.cursor()
    cursor.execute("UPDATE users SET Admin = 0 WHERE ID = %s", (user_id,))
    db.commit()
    db.close()
    await message.reply(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID <b>{user_id}</b> –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ —Å–Ω—è—Ç—ã.")


# === –ü–û–ö–£–ü–ö–ò ===
@dp.message(lambda msg: msg.text.lower().startswith("/purchases") or msg.text.lower().startswith("–ø–æ–∫—É–ø–∫–∏"))
async def last_purchases(message: Message):
    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM purchases ORDER BY Date DESC LIMIT 10")
    purchases = cursor.fetchall()
    db.close()

    if not purchases:
        return await message.reply("‚ùå –ù–µ—Ç –ø–æ–∫—É–ø–æ–∫.")

    text = "üõí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
    for p in purchases:
        text += (
            f"üìå <b>{p['Title']}</b>\n"
            f"üë§ UserID: {p['UserID']}\n"
            f"üìÖ {p['Date']}\n"
            f"üìé {p['Opisanie'][:50]}...\n\n"
        )
    await message.reply(text)

@dp.message(lambda msg: msg.text.lower().startswith("/all_purchases") or msg.text.lower().startswith("–≤—Å–µ –ø–æ–∫—É–ø–∫–∏"))
async def all_purchases(message: Message):
    if message.from_user.id != MAIN_ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞.")

    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM purchases ORDER BY Date DESC")
    purchases = cursor.fetchall()
    db.close()

    text = "üì¶ <b>–í—Å–µ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
    for p in purchases:
        text += (
            f"üîπ {p['Date']} ‚Äî <b>{p['Title']}</b>\n"
            f"üë§ UserID: {p['UserID']}\n"
            f"üìé {p['Opisanie'][:50]}...\n\n"
        )
    await message.reply(text)

# === –ü–†–û–ú–û ===
@dp.message(lambda msg: msg.text.lower().startswith("/create_promo") or msg.text.lower().startswith("—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ"))
async def create_promo(message: Message, state: FSMContext):
    if message.from_user.id != MAIN_ADMIN_ID:
        return await message.reply("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:")
    await state.set_state(PromoState.name)

@dp.message(PromoState.name)
async def promo_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (—á–∏—Å–ª–æ):")
    await state.set_state(PromoState.skidka)

@dp.message(PromoState.skidka)
async def promo_skidka(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.update_data(skidka=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
    await state.set_state(PromoState.uses)

@dp.message(PromoState.uses)
async def promo_uses(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    data = await state.get_data()
    name = data['name']
    skidka = data['skidka']
    uses = int(message.text)

    db = connect_db()
    cursor = db.cursor()
    cursor.execute("INSERT INTO promo (Name, Skidka, Uses, Used) VALUES (%s, %s, %s, 0)", (name, skidka, uses))
    db.commit()
    db.close()
    await state.clear()
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{name}</b> —Å–æ–∑–¥–∞–Ω —Å–æ —Å–∫–∏–¥–∫–æ–π <b>{skidka}</b> –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>{uses}</b> —Ä–∞–∑.")

@dp.message(lambda msg: msg.text.lower().startswith("/promo_stats") or msg.text.lower().startswith("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ"))
async def promo_stats(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM promo")
    promos = cursor.fetchall()
    db.close()

    if not promos:
        return await message.reply("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")

    result = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n"
    for promo in promos:
        percent = (promo['Used'] / promo['Uses'] * 100) if promo['Uses'] > 0 else 0
        result += (
            f"\n<b>{promo['Name']}</b>: {promo['Used']} / {promo['Uses']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
            f" ({percent:.1f}%) ‚Äî –°–∫–∏–¥–∫–∞: {promo['Skidka']}"
        )

    await message.reply(result)

def is_valid_url(url: str) -> bool:
    return isinstance(url, str) and re.match(r'^https?://[^\s]+$', url)

# === BAN ===
@dp.message(lambda msg: msg.text.lower().startswith("/ban") or msg.text.lower().startswith("–±–∞–Ω"))
async def ban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /ban id")

    user_id = int(args[1])
    
    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE ID = %s", (user_id,))
    user = cursor.fetchone()

    if not user:
        db.close()
        return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    cursor.execute("UPDATE users SET is_banned = TRUE WHERE ID = %s", (user_id,))
    db.commit()
    db.close()

    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID <b>{user_id}</b> –∑–∞–±–∞–Ω–µ–Ω.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
    if message.from_user.id != MAIN_ADMIN_ID:
        await bot.send_message(
            MAIN_ADMIN_ID,
            f"‚ö†Ô∏è <b>–ê–¥–º–∏–Ω @{message.from_user.username or '–ë–µ–∑ username'} (ID: {message.from_user.id})</b>\n"
            f"–∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID <b>{user_id}</b>\n"
            f"üìß Email: {user.get('Email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )

# === UNBAN ===
@dp.message(lambda msg: msg.text.lower().startswith("/unban") or msg.text.lower().startswith("—Ä–∞–∑–±–∞–Ω"))
async def unban_user(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /unban id")

    user_id = int(args[1])
    
    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT * FROM users WHERE ID = %s", (user_id,))
    user = cursor.fetchone()

    if not user:
        db.close()
        return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    cursor.execute("UPDATE users SET is_banned = FALSE WHERE ID = %s", (user_id,))
    db.commit()
    db.close()

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID <b>{user_id}</b> —Ä–∞–∑–±–∞–Ω–µ–Ω.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
    if message.from_user.id != MAIN_ADMIN_ID:
        await bot.send_message(
            MAIN_ADMIN_ID,
            f"‚ÑπÔ∏è <b>–ê–¥–º–∏–Ω @{message.from_user.username or '–ë–µ–∑ username'} (ID: {message.from_user.id})</b>\n"
            f"—Ä–∞–∑–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID <b>{user_id}</b>\n"
            f"üìß Email: {user.get('Email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
    # –¢–æ–≤–∞—Ä—ã —Å–ø–∏—Å–æ–∫
@dp.message(lambda msg: msg.text.lower().startswith("/products") or msg.text.lower().startswith("—Ç–æ–≤–∞—Ä—ã"))
async def list_products(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    db = connect_db()
    cursor = db.cursor(dictionary=True)
    cursor.execute("SELECT ID, Title FROM shop ORDER BY ID")
    items = cursor.fetchall()
    db.close()

    if not items:
        return await message.reply("üì¶ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    text = "üõç <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"
    for item in items:
        text += f"üîπ <b>ID:</b> {item['ID']} ‚Äî {item['Title']}\n"

    await message.reply(text)
    
    # –Ω–æ–≤–∞—è —Ü–µ–Ω–∞
@dp.message(lambda msg: msg.text.lower().startswith("/newcost"))
async def set_new_cost(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /newcost 12 999")

    product_id = int(args[1])
    new_cost = int(args[2])

    db = connect_db()
    cursor = db.cursor()
    cursor.execute("UPDATE shop SET Cost = %s WHERE ID = %s", (new_cost, product_id))
    db.commit()
    db.close()

    await message.reply(f"üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ ID <b>{product_id}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <b>{new_cost}</b> –º–æ–Ω–µ—Ç.")
   
    # —Å–∫–∏–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message(lambda msg: msg.text.lower().startswith("/skidka"))
async def set_skidka(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /skidka 12 30")

    product_id = int(args[1])
    skidka = int(args[2])

    db = connect_db()
    cursor = db.cursor()
    cursor.execute("UPDATE shop SET Skidka = %s WHERE ID = %s", (skidka, product_id))
    db.commit()
    db.close()

    await message.reply(f"üîª –°–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä ID <b>{product_id}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <b>{skidka}%</b>.")

    # —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É
@dp.message(lambda msg: msg.text.lower().startswith("/cost"))
async def set_old_cost(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply("‚ùó –ü—Ä–∏–º–µ—Ä: /cost 12 1499")

    product_id = int(args[1])
    old_cost = int(args[2])

    db = connect_db()
    cursor = db.cursor()
    cursor.execute("UPDATE shop SET OldCost = %s WHERE ID = %s", (old_cost, product_id))
    db.commit()
    db.close()

    await message.reply(f"üí∏ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ ID <b>{product_id}</b> –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{old_cost}</b> –º–æ–Ω–µ—Ç.")







# === –ê–í–¢–û–ü–†–û–í–ï–†–ö–ê –ü–û–ö–£–ü–û–ö ===
async def check_new_purchases():
    global last_seen_buy_id
    while True:
        await asyncio.sleep(10)
        try:
            db = connect_db()
            cursor = db.cursor(dictionary=True)
            cursor.execute("SELECT * FROM purchases WHERE Status = '–æ–ø–ª–∞—á–µ–Ω–æ' ORDER BY BuyID DESC LIMIT 1")
            latest = cursor.fetchone()
            db.close()

            if latest and latest['BuyID'] > last_seen_buy_id:
                last_seen_buy_id = latest['BuyID']

                user_id = latest['UserID']
                title = latest['Title']
                opisanie = (latest['Opisanie'] or "")[:100] + "..."
                date = latest['Date']
                download = latest.get('DownloadLink')
                download = download if is_valid_url(download) else '‚Äî'
                image = latest.get('Image')

                text = (
                    f"üõí <b>–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!</b>\n"
                    f"üë§ <b>UserID:</b> {user_id}\n"
                    f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                    f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {opisanie}\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
                    f"üîó <b>–°–∫–∞—á–∞—Ç—å:</b> {download}"
                )

                if is_valid_url(image):
                    try:
                        await bot.send_photo(MAIN_ADMIN_ID, image, caption=text)
                    except Exception as e:
                        print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ] {e}")
                        await bot.send_message(MAIN_ADMIN_ID, text)
                else:
                    await bot.send_message(MAIN_ADMIN_ID, text)

        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—É–ø–æ–∫] {e}")

@dp.message(Command("help"))
async def help_cmd(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    text = (
        "üõ† <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "<b>/ping</b> ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç\n"
        "<b>/info &lt;id&gt;</b> ‚Äî –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "<b>/give &lt;id&gt; &lt;—Å—É–º–º–∞&gt;</b> ‚Äî –í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
        "<b>/take &lt;id&gt; &lt;—Å—É–º–º–∞&gt;</b> / –∑–∞–±—Ä–∞—Ç—å ‚Äî –ò–∑—ä—è—Ç—å –±–∞–ª–∞–Ω—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "<b>/setbalance &lt;id&gt; &lt;—Å—É–º–º–∞&gt;</b> / —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—Ä—É—á–Ω—É—é\n"
        "<b>/setadmin &lt;id&gt;</b> / –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞ ‚Äî –í—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)\n"
        "<b>/removeadmin &lt;id&gt;</b> / —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω –ø—Ä–∞–≤–∞ ‚Äî –°–Ω—è—Ç—å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)\n"
        "<b>/notifications</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "<b>—Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FSM\n"
        "<b>/purchases</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫\n"
        "<b>/all_purchases</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)\n"
        "<b>/create_promo</b> ‚Äî –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)\n"
        "<b>/promo_stats</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
        "<b>/ban &lt;id&gt;</b> / –±–∞–Ω ‚Äî –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n"
        "<b>/unban &lt;id&gt;</b> / —Ä–∞–∑–±–∞–Ω ‚Äî –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n"
        "<b>/products</b> / —Ç–æ–≤–∞—Ä—ã ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        "<b>/newcost id —Ü–µ–Ω–∞</b> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞\n"
        "<b>/cost id —Ü–µ–Ω–∞</b> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞\n"
        "<b>/skidka id –ø—Ä–æ—Ü–µ–Ω—Ç</b> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∏–¥–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä\n"


    )

    await message.reply(text)

@app.on_event("startup")
async def on_startup():
    moscow_time = datetime.now(ZoneInfo("Europe/Moscow")).strftime("%Y-%m-%d %H:%M:%S")
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {moscow_time} (–ú–°–ö)")
    await bot.send_message(MAIN_ADMIN_ID, f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {moscow_time} (–ú–°–ö)")

    global last_seen_buy_id
    try:
        db = connect_db()
        cursor = db.cursor(dictionary=True)
        cursor.execute("SELECT BuyID FROM purchases WHERE Status = '–æ–ø–ª–∞—á–µ–Ω–æ' ORDER BY BuyID DESC LIMIT 1")
        last = cursor.fetchone()
        db.close()
        if last:
            last_seen_buy_id = last['BuyID']
            print(f"[–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è] –ü–æ—Å–ª–µ–¥–Ω–∏–π BuyID: {last_seen_buy_id}")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BuyID] {e}")

    asyncio.create_task(check_new_purchases())

@app.post("/webhook")
async def webhook_handler(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}
